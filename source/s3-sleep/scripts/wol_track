#!/bin/bash

program=$(basename $0)

# program control
quit_flag=no          # signal program exit
sleepNow=no           # force immediate sleep now

# options to overwrite defaults
while getopts "q" opt; do
  case $opt in
    q) quit_flag=yes ;;
  esac
done

lockfile=/var/lock/wol_track.lck
if [[ -f $lockfile ]]; then
  # The file exists so read the PID to see if it is still running
  lock_pid=$(head -n 1 $lockfile)
  if [[ -z $(ps -p $lock_pid|grep $lock_pid) ]]; then
    if [[ $quit_flag == no ]]; then
      # The process is not running, echo current PID into lock file
      echo $$ >$lockfile
    else
      echo "$program $lock_pid is not currently running "
      rm -f $lockfile
      exit 0
    fi
  else
    if [[ $quit_flag == yes ]]; then
      echo killing $program process $lock_pid
      echo killing $program process $lock_pid | logger -t$program
      kill $lock_pid
      rm -f $lockfile
      exit 0
    else
      echo "$program is already running [$lock_pid]"
      exit 1
    fi
  fi
else
  if [[ $quit_flag == yes ]]; then
    echo "$program not currently running "
    exit 0
  else
    echo $$ >$lockfile
  fi
fi

tcpdump -lnti eth0 "(ether proto 0x0842) or (udp port 9)" 2>/dev/null | \
awk -v interface=eth0 -v program="$program" '{
    if ($0 ~ /0x0842/) {
        # Ethernet-based WOL packet (no IP layer)
        src_mac = $1;
        message = "MagicPacket received from MAC: " src_mac " via 0x0842 on " interface;
        system("logger -t \"" program "\" \"" message "\"");
    }
    else if ($0 ~ /UDP/) {
        # UDP-based WOL packet
        for (i=1; i<=NF; i++) {
            if ($i == ">") {
                split($(i-1), src, /\./);
                src_ip = src[1];
                for (j=2; j<=4; j++) {
                    src_ip = src_ip "." src[j];
                }
                break;
            }
        }
        message = "MagicPacket received from IP: " src_ip " via UDP/9 on " interface;
        system("logger -t \"" program "\" \"" message "\"");
    }
}' &

while [[ -f $lockfile ]]; do
  sleep 600
done &

# while tpcdump put into background, now disown it, so it will continue to run when user is logged off
background_pid=$!
echo $background_pid >$lockfile
echo "$program process ID $background_pid started, To terminate it, type: $program -q"
echo "$program process ID $background_pid started, To terminate it, type: $program -q"|logger -t$program
disown %%
