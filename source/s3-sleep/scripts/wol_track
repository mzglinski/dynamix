#!/bin/bash

program=$(basename $0)

# program control
quit_flag=no          # signal program exit
sleepNow=no           # force immediate sleep now

# options to overwrite defaults
while getopts "q" opt; do
  case $opt in
    q) quit_flag=yes ;;
  esac
done

lockfile=/var/lock/wol_track.lck
if [[ -f $lockfile ]]; then
  # The file exists so read the PIDs to see if they are still running
  lock_content=$(head -n 1 $lockfile)
  
  # Parse the lockfile content (format: monitor_pid:tcpdump_pid or just monitor_pid for old format)
  if [[ $lock_content =~ ^([0-9]+):([0-9]+)$ ]]; then
    monitor_pid=${BASH_REMATCH[1]}
    tcpdump_pid=${BASH_REMATCH[2]}
  else
    # Old format - just monitor PID
    monitor_pid=$lock_content
    tcpdump_pid=""
  fi
  
  if [[ -z $(ps -p $monitor_pid|grep $monitor_pid) ]]; then
    if [[ $quit_flag == no ]]; then
      # The process is not running, echo current PID into lock file
      echo $$ >$lockfile
    else
      echo "$program $monitor_pid is not currently running "
      rm -f $lockfile
      exit 0
    fi
  else
    if [[ $quit_flag == yes ]]; then
      echo killing $program process $monitor_pid
      echo killing $program process $monitor_pid | logger -t$program
      kill $monitor_pid
      
      # Also kill tcpdump process if we have its PID
      if [[ -n $tcpdump_pid && -n $(ps -p $tcpdump_pid 2>/dev/null|grep $tcpdump_pid) ]]; then
        echo killing tcpdump process $tcpdump_pid
        echo killing tcpdump process $tcpdump_pid | logger -t$program
        kill $tcpdump_pid
      fi
      
      rm -f $lockfile
      exit 0
    else
      echo "$program is already running [$monitor_pid]"
      exit 1
    fi
  fi
else
  if [[ $quit_flag == yes ]]; then
    echo "$program not currently running "
    
    # Kill any orphaned tcpdump processes that might be running for this script
    orphaned_pids=$(pgrep -f "tcpdump.*eth0.*(ether proto 0x0842)")
    if [[ -n $orphaned_pids ]]; then
      echo "Found orphaned tcpdump processes: $orphaned_pids"
      echo "Killing orphaned tcpdump processes: $orphaned_pids" | logger -t$program
      kill $orphaned_pids 2>/dev/null
    fi
    
    exit 0
  else
    echo $$ >$lockfile
  fi
fi

tcpdump -lnti eth0 "(ether proto 0x0842) or (udp port 9)" 2>/dev/null | \
awk -v interface=eth0 -v program="$program" '{
    if ($0 ~ /0x0842/) {
        # Ethernet-based WOL packet (no IP layer)
        src_mac = $1;
        message = "MagicPacket received from MAC: " src_mac " via 0x0842 on " interface;
        system("logger -t \"" program "\" \"" message "\"");
    }
    else if ($0 ~ /UDP/) {
        # UDP-based WOL packet
        for (i=1; i<=NF; i++) {
            if ($i == ">") {
                split($(i-1), src, /\./);
                src_ip = src[1];
                for (j=2; j<=4; j++) {
                    src_ip = src_ip "." src[j];
                }
                break;
            }
        }
        message = "MagicPacket received from IP: " src_ip " via UDP/9 on " interface;
        system("logger -t \"" program "\" \"" message "\"");
    }
}' &

# Capture the PID of the tcpdump process
tcpdump_pid=$!

while [[ -f $lockfile ]]; do
  sleep 600
done &

# Store both PIDs in the lockfile (monitor_pid:tcpdump_pid)
monitor_pid=$!
echo "$monitor_pid:$tcpdump_pid" >$lockfile
echo "$program process ID $monitor_pid started (tcpdump PID: $tcpdump_pid), To terminate it, type: $program -q"
echo "$program process ID $monitor_pid started (tcpdump PID: $tcpdump_pid), To terminate it, type: $program -q"|logger -t$program
disown %%
